<input type="hidden" name="daysEachMonths" value="{{stringify daysEachMonths}}" />

<div x-data="initDueMonthlyData()">
	<div class="mt-3 pb-3">
		<div class="d-flex align-items-center justify-content-end">
			<a
				class="btn btn-primary"
				data-bs-toggle="collapse"
				href="#collapse-jimpitan-statistic-filter"
				role="button"
				aria-expanded="true"
				aria-controls="collapse-jimpitan-statistic-filter"
			>
				<i class="bi bi-funnel me-1"></i>
				Filter Riwayat
			</a>
		</div>

		<div class="collapse show" id="collapse-jimpitan-statistic-filter">
			<div class="mt-3 card card-body">
				<form class="row g-3 mb-0">
					<div class="col-6 col-md-2">
						<label for="rw" class="form-label"> RW </label>
						<select
							class="form-control select2 {{echoif (lookup errors.fieldErrors 'community_assoc_id') 'is-invalid'}}"
							name="community_assoc_id"
							width="100%"
						>
							<option value=""></option>
							{{#each communityAssocs as |communityAssoc|}}
								<option value="{{communityAssoc.id}}">
									{{communityAssoc.name}}
								</option>
							{{/each}}
						</select>
					</div>
					<div class="col-6 col-md-2">
						<label for="resident_assoc_id" class="form-label"> RT </label>
						<select class="form-select" name="resident_assoc_id" aria-label="Pilih RT">
							<option value=""></option>
						</select>
					</div>
				</form>
			</div>
		</div>
	</div>

	<div class="table-responsive">
		<canvas id="jimpitan-statistics"></canvas>
	</div>
</div>

{{#content "scripts" mode="append"}}
	<script type="text/javascript" src="/plugins/select2/js/select2.full.min.js"></script>
	{{!-- prettier-ignore --}}
	<script type="text/javascript">
		function initDueMonthlyData() {
			return {
				filters: {
					communityAssocId: '',
					residentAssocId: '',
				},
				chartInstance: null,
				init() {
					const root = this;

					$('[name="community_assoc_id"]').select2({ placeholder: "Pilih RW", allowClear: true });
					$('[name="community_assoc_id"]').change(function() {
						root.filters.communityAssocId = $(this).val();

						$('[name="resident_assoc_id"]').val("").trigger("change");

						const communityAssocId = $(this).val();
						const residentAssocsApiUrl = `/api/community-assocs/${communityAssocId}/resident-assocs`;
						select2AjaxHandler('[name="resident_assoc_id"]', residentAssocsApiUrl, {
							placeholder: "Pilih RT",
							allowClear: true,
						});
					});

					$('[name="resident_assoc_id"]').select2({ placeholder: "Pilih RT", allowClear: true });
					$('[name="resident_assoc_id"]').change(function() {
						root.filters.residentAssocId = $(this).val();
					})

					this.initChart();

					this.$watch('filters', (_) => {
						if (this.chartInstance) {
							this.chartInstance.destroy();
						}
						this.initChart();
					});
				},
				async initChart() {
					const daysEachMonths = JSON.parse($('[name="daysEachMonths"]').val());

					const dataMonthly = await this.fetchDataMonthly();

					let datasets = [];
					dataMonthly.forEach((data) => {
						const datasetExist = datasets.find((dataset) => dataset.id === data['resident_assoc.id']);
						if (datasetExist) {
							datasets = [
								...datasets.filter((dataset) => dataset.id !== data['resident_assoc.id']),
								{
									...datasetExist,
									data: [...datasetExist.data, data['total_amount']],
								},
							];
							return;
						}

						datasets.push({
							id: data['resident_assoc.id'],
							label: data['resident_assoc.name'] + ", " + data['resident_assoc.community_assoc.name'],
							backgroundColor: data['resident_assoc.color_code'],
							data: [data['total_amount']]
						});
					});
					
					this.chartInstance = new Chart($("#jimpitan-statistics"), {
						type: "bar",
						data: {
							labels: daysEachMonths.map(({ month }) => month.replace("20", "")),
							datasets,
						},
					});
				},
				async fetchDataMonthly() {
					const qParams = new URLSearchParams();
					qParams.append('cai', this.filters.communityAssocId);
					qParams.append('rai', this.filters.residentAssocId);

					const fetchData = await fetch('/api/dues/income/monthly?' + qParams.toString());

					if (fetchData.status !== 200) return [];

					const data = await fetchData.json();
					return data;
				}
			};
		}
	</script>
	{{!-- prettier-ignore --}}
{{/content}}